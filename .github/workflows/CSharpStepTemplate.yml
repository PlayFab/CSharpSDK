# STEPS LEVEL TEMPLATE:
# Used to build CSharp
# Reusable
# Used to "hide" the additional variables specific to this SDK which shouldn't be set from a higher level, or
#   shared from a multi-build pipeline like a publish

parameters:
- name: ApiSpecSource
  displayName: ApiSpecSource
  type: string
  default: -apiSpecGitUrl https://raw.githubusercontent.com/PlayFab/API_Specs/master/
- name: CommitMessage
  displayName: CommitMessage
  type: string
  default: Automated build from ADO Pipeline
- name: GitDestBranch
  displayName: GitDestBranch
  type: string
  default: doNotCommit
- name: SdkName
  displayName: SdkName
  type: string
  default: CSharpSDK
- name: GitJSetupBranch
  displayName: GitJSetupBranch
  type: string
  default: master
- name: GitSdkGenBranch
  displayName: GitSdkGenBranch
  type: string
  default: master
- name: isVersioned
  displayName: isVersioned
  type: boolean
  default: false
- name: TestCompile
  displayName: TestCompile
  type: boolean
  default: true
- name: TestWin32NetCore
  displayName: TestWin32NetCore
  type: boolean
  default: true
- name: TestWin32Basic
  displayName: TestWin32Basic
  type: boolean
  default: true
- name: SelfTemplateResource
  displayName: SelfTemplateResource
  type: string
  default: self

steps:
- checkout: JenkinsSdkSetupScripts
  clean: true
  path: s
- checkout: API_Specs
  clean: true
  path: s/API_Specs
- checkout: SdkGenerator
  clean: true
  path: s/SdkGenerator
- checkout: CSharpSdk
  clean: true
  submodules: true
  path: s/sdks/CSharpSDK
  persistCredentials: true
- bash: |
    set -e
    
    echo alias the ADO variables into local variables
    ApiSpecSource="${{ parameters.ApiSpecSource }}"
    CommitMessage="${{ parameters.CommitMessage }}"
    GitDestBranch="${{ parameters.GitDestBranch }}"
    SdkName="${{ parameters.SdkName }}"
    WORKSPACE=$(pwd -W)
    # Hack attempt to get WORKSPACE into a sub-environment
    export WORKSPACE="$WORKSPACE"
    
    cd "$WORKSPACE/sdks/$SdkName"
    
    . "$WORKSPACE/JenkinsSdkSetupScripts/JenkinsScripts/Pipeline/testInit.sh"
    
    cd "$WORKSPACE/SDKGenerator/SDKBuildScripts"
    targetSrc="csharp"
    export PF_TEST_TITLE_DATA_JSON="$WORKSPACE\JenkinsSdkSetupScripts\Creds\testTitleData.json"
    . ./shared_build.sh

    echo === Build the CSharp Project ===
    # if $TestCompile
    # cmd << msbuild "$WORKSPACE/sdks/$SdkName/PlayFabSDK/PlayFabSDK.sln" /restore /p:configuration="Debug" /t:Rebuild
    # (dot net 4.6 with msbuild 2017) "$WORKSPACE/sdks/$SdkName/PlayFabSDK/PlayFabSDK.sln" /restore /p:configuration="Debug" /t:Rebuild
    # (dot net 4.6 with msbuild 2017) "$WORKSPACE/sdks/$SdkName/PlayFabSDK/PlayFabSDK.sln" /restore /p:configuration="Release" /t:Rebuild
    
    echo === Build the CSharp UnitTestRunner ===
    # if $TestWin32NetCore
    # (dot net 4.6 with msbuild 2017) "$WORKSPACE/sdks/$SdkName/PlayFabSDK/UnittestRunner/UnittestRunner.csproj" /restore /p:configuration="Release" /t:Rebuild

    echo === Run the CSharpSdk UnitTestRunner net core app 2.0 ===
    # .NetCore version of CSharpSdk
    # cd "$WORKSPACE/sdks/$SdkName/PlayFabSDK/UnittestRunner/bin/Release/netcoreapp2.0"
    # dotnet UnittestRunner.dll -testInputsFile "$WORKSPACE\JenkinsSdkSetupScripts\Creds\testTitleData.json"

    echo === Build PlayFabSDK+Unit.sln ===
    # if $TestWin32Basic
    # (dot net 4.6 with msbuild 2017) "$WORKSPACE/sdks/$SdkName/PlayFabSDK/PlayFabSDK+Unit.sln" /restore /p:configuration="Release" /t:Rebuild

    echo === Run PlayFabSDK+Unit.sln ===
    # rem .Net45-only version of CSharpSdk
    # cd "%WORKSPACE%/sdks/%SdkName%/PlayFabSDK/UnittestRunner/bin/Release/net45"
    # cmd <<< UnittestRunner.exe -testInputsFile "%WORKSPACE%/JenkinsSdkSetupScripts/Creds/testTitleData.json"

    echo === Nuget Restore JenkinsConsoleUtility ===
    # cd %WORKSPACE%/SDKGenerator/JenkinsConsoleUtility
    # nuget restore JenkinsConsoleUtility.sln

    echo === Build JenkinsConsoleUtility ===
    # (dot net 4.6 with msbuild 2017) "$WORKSPACE/SDKGenerator/JenkinsConsoleUtility/JenkinsConsoleUtility.sln" /p:configuration="Debug" /p:platform="Any CPU" /t:Rebuild

    ListenCsJCU

    # if $isVersioned && $SdkName == CSharpSDK
    
    # Not relevant at this time
    # cd "$WORKSPACE/SDKGenerator/JenkinsConsoleUtility/JenkinsScripts"
    # . ./gitAdoFinalize.sh
  displayName: 'Build/Test/Report'
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '*.xml'
    testRunTitle: UnitySwitchTemplate
